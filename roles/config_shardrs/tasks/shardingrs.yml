#
# Shards Replicaser Config
# 
- name: "[Sharding] Get Subgroups Shard Server"
  set_fact:
    subgroups: "{{ subgroups|default([]) + hostvars[item].group_names }}"
  loop: "{{ groups.shard_servers }}"
  run_once: true

- name: "[Sharding] Get only on group Shard Server"
  set_fact:
    shards_nodes: "{{ subgroups|unique|difference(['replicaset_nodes'])|difference(['shard_servers']) }}"
  run_once: true

- name: "[Sharding] Add Storage nodes in replicaset"
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    replica_set: "{{ replica_set_name }}"
    members: "{{ groups[item]|join(',') }}"
    validate: no
  with_items: "{{ shards_nodes }}"
  when: "primary is defined and 'shard_servers' in hostvars[ansible_host]['group_names']"

#
# ConfigServer Replicaser Config
#

- name: "[ConfigSrv] Add Storage nodes in replicaset ConfigServer"
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: "{{ replica_set_port }}"
    replica_set: "{{ replica_set_name }}"
    members: "{{ item }}:{{ replica_set_port }}"
    validate: no
  with_items: "{{groups.config_servers}}"
  when: "primary is defined  and 'config_servers' in hostvars[ansible_host]['group_names']"

#
# Common configurations
#

- name: Waiting 30 seconds to MongoDB ready
  wait_for:
    timeout: 30

- name: Lookup PRIMARY replicaset member
  community.mongodb.mongodb_status:
    replica_set: "{{ replica_set_name }}"
    login_port: "{{ replica_set_port }}"
  register: replicaset
  when: "primary is defined"

- name: Get primary node in multiples nodes
  set_fact:
    primary_rs: "{{ item.key.split(':')[0] }}"
  with_items: "{{ lookup('dict', replicaset.replicaset) }}"
  when: "'PRIMARY' in item.value"
  ignore_errors: true

- name: Get primary node in sigle node
  set_fact:
    primary_rs: "{{ item.split(':')[0] }}"
  with_items: "{{ replicaset.replicaset.keys()|list }}"
  when: (replicaset.replicaset|length) == 1

# - name: "Create Database user administrator"
#   community.mongodb.mongodb_user:
#     login_host: "{{ primary_rs }}"
#     login_port: "{{ replica_set_port }}"
#     database: "admin"
#     name: "{{ user_admin }}"
#     password: "{{ pass_admin }}"
#     roles: "root"
#   delegate_to: "{{ primary_rs }}"